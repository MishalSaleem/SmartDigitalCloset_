@page "/signup"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.SessionStorage
@using SmartDigitalCloset.Data
@using SmartDigitalCloset.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<div class="sc-pinterest-bg">
    <div class="sc-pinterest-layout">
        <!-- Left: Image grid and heading -->
        <div class="sc-pinterest-left">
            <h1 class="sc-pinterest-heading">Create your<br>style journey.</h1>
        </div>
        <!-- Right: Signup form -->
        <div class="sc-signup-card">
            <div class="sc-logo-circle">SC</div>
            <span class="sc-app-title">SmartCloset</span>
            <div>Create your account</div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="sc-error-message">@errorMessage</div>
            }
            <EditForm Model="@signupModel" OnValidSubmit="@HandleSignup">
                <DataAnnotationsValidator />
                <div class="sc-form-group">
                    <InputText id="email" class="sc-input" @bind-Value="signupModel.Email" placeholder="Email address" />
                    <ValidationMessage For="@(() => signupModel.Email)" />
                </div>
                <div class="sc-form-group">
                    <InputText id="username" class="sc-input" @bind-Value="signupModel.Username" placeholder="Username" />
                    <ValidationMessage For="@(() => signupModel.Username)" />
                </div>
                <div class="sc-form-group">
                    <InputText id="password" type="password" class="sc-input" @bind-Value="signupModel.Password" placeholder="Password" />
                    <ValidationMessage For="@(() => signupModel.Password)" />
                </div>
                <div class="sc-form-group">
                    <InputText id="firstName" class="sc-input" @bind-Value="signupModel.FirstName" placeholder="First Name" />
                    <ValidationMessage For="@(() => signupModel.FirstName)" />
                </div>
                <div class="sc-form-group">
                    <InputText id="lastName" class="sc-input" @bind-Value="signupModel.LastName" placeholder="Last Name" />
                    <ValidationMessage For="@(() => signupModel.LastName)" />
                </div>
                <div class="sc-form-group">
                    <label for="birthdate" class="sc-input-label">Date of Birth</label>
                    <InputDate id="birthdate" 
                               class="sc-date-input" 
                               @bind-Value="signupModel.Birthdate" 
                               max="@DateTime.Today.ToString("yyyy-MM-dd")"
                               min="@DateTime.Today.AddYears(-100).ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="@(() => signupModel.Birthdate)" />
                </div>
                <button type="submit" class="sc-btn sc-btn-signup">Sign up</button>
            </EditForm>
            <div class="sc-or">OR</div>
            <button class="sc-btn sc-btn-facebook">
                <span class="sc-icon fb"></span>Continue with Facebook
            </button>
            <button class="sc-btn sc-btn-google">
                <span class="sc-icon google"></span>Continue with Google
            </button>
        </div>
    </div>
</div>

@code {
    private SignupModel signupModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleSignup()
    {
        try
        {
            // Check if user already exists
            var existingUser = AuthService.GetUserByEmail(signupModel.Email);
            if (existingUser != null)
            {
                errorMessage = "A user with this email already exists. Please use a different email or login.";
                return;
            }

            var user = new User
            {
                Email = signupModel.Email,
                Username = signupModel.Username,
                Password = signupModel.Password,
                FirstName = signupModel.FirstName,
                LastName = signupModel.LastName,
                Birthdate = signupModel.Birthdate,
                CreatedAt = DateTime.UtcNow
            };

            try
            {
                user = AuthService.RegisterUser(user);
                if (user.Id > 0)
                {
                    // Successfully registered, redirect to login
                    await Task.Delay(100); // Small delay before navigation
                    Navigation.NavigateTo("/Login");
                }
                else
                {
                    errorMessage = "Failed to create account. Please try again.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = "Error creating account: " + ex.Message;
                await Console.Error.WriteLineAsync($"Registration error: {ex}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            await Console.Error.WriteLineAsync($"Signup error: {ex}");
        }
    }

    public class SignupModel : IValidatableObject
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number and one special character")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Birthdate is required")]
        public DateTime Birthdate { get; set; } = DateTime.Today.AddYears(-18);

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var results = new List<ValidationResult>();
            
            if (Birthdate > DateTime.Today)
            {
                results.Add(new ValidationResult("Birth date cannot be in the future", new[] { nameof(Birthdate) }));
            }

            return results;
        }
    }
}
