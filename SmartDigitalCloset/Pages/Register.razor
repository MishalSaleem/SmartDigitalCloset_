@page "/register"
@using SmartDigitalCloset.Services
@using SmartDigitalCloset.Data
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Register</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="@HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="username">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="password">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="registerModel.Password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="firstName">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
                            <ValidationMessage For="@(() => registerModel.FirstName)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="lastName">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
                            <ValidationMessage For="@(() => registerModel.LastName)" />
                        </div>

                        <div class="form-group mt-3">
                            <label for="birthdate">Birthdate</label>
                            <InputDate id="birthdate" class="form-control" @bind-Value="registerModel.Birthdate" />
                            <ValidationMessage For="@(() => registerModel.Birthdate)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }

                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>

                        <div class="text-center mt-3">
                            <a href="/login">Already have an account? Login here</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            var user = new User
            {
                Email = registerModel.Email,
                Username = registerModel.Username,
                Password = registerModel.Password,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Birthdate = registerModel.Birthdate
            };

            user = AuthService.RegisterUser(user);
            await SessionStorage.SetItemAsync("userId", user.Id);
            await SessionStorage.SetItemAsync("userEmail", user.Email);
            NavigationManager.NavigateTo("/interests");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Birthdate is required")]
        public DateTime Birthdate { get; set; } = DateTime.Today.AddYears(-18);
    }
} 